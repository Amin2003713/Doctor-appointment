@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService Auth
@inject NavigationManager Nav

<MudAppBar Elevation="4" Color="Color.Default" Class="px-2" dir="rtl">
    <MudIconButton Icon="@Icons.Material.Filled.Menu"
                   Color="Color.Inherit"
                   Edge="Edge.Start"
                   OnClick="_ToggleDrawer"/>

    <MudText Typo="Typo.h6" Class="ml-2">@Title</MudText>

    <MudSpacer/>

    <!-- Optional: notifications placeholder -->
    <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Class="mx-1"/>

    <AuthorizeView>
        <Authorized>
            <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                <ActivatorContent>
                    <MudButton Variant="Variant.Text" Color="Color.Inherit"
                               StartIcon="@Icons.Material.Filled.AccountCircle">
                        @DisplayName
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(() => Nav.NavigateTo("/profile"))" Icon="@Icons.Material.Filled.Person">
                        پروفایل
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => Nav.NavigateTo("/settings"))" Icon="@Icons.Material.Filled.Settings">
                        تنظیمات
                    </MudMenuItem>
                    <MudDivider/>
                    <MudMenuItem Disabled="@_busy" OnClick="Logout" Icon="@Icons.Material.Filled.Logout">
                        @(_busy ? "در حال خروج..." : "خروج")
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        </Authorized>
    </AuthorizeView>
</MudAppBar>

@code {
    [Parameter] public EventCallback ToggleDrawer { get; set; }
    [Parameter] public string Title { get; set; } = "مدیریت نوبت‌ها";

    [CascadingParameter] private Task<AuthenticationState>? AuthStateTask { get; set; }

    private bool _busy;

    private async Task _ToggleDrawer()
        => await ToggleDrawer.InvokeAsync();

    private async Task<string> GetDisplayNameAsync()
    {
        if (AuthStateTask is null) return string.Empty;
        var state = await AuthStateTask;
        var user  = state.User;
        if (user?.Identity?.IsAuthenticated != true) return string.Empty;

        // Prefer FullName/Name claim, fallback to Email
        return user.FindFirst("name")?.Value ?? user.Identity?.Name ?? user.FindFirst("email")?.Value ?? "کاربر";
    }

    private string _cachedDisplayName = string.Empty;
    private string DisplayName => _cachedDisplayName;

    protected override async Task OnParametersSetAsync()
    {
        _cachedDisplayName = await GetDisplayNameAsync();
    }

    private async Task Logout()
    {
        if (_busy) return;
        _busy = true;

        try
        {
            await Auth.LogoutAsync();
            // Navigate after logout (optional)
            Nav.NavigateTo("/login" , forceLoad: true);
        }
        finally
        {
            _busy = false;
        }
    }

}
