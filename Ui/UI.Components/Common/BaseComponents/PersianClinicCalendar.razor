@using System.Globalization
@using Heron.MudCalendar
@using MudBlazor
@using App.Applications.Appointments
@using App.Applications.Appointments.Requests


@inherits ComponentBase


    <MudCalendar T="ClinicCalendarItem"
                 Culture="@(new CultureInfo("fa-IR"))"
                 FirstDayOfWeek="@FirstDayOfWeek"
                 CurrentDay="@CurrentDay"
                 ShowMonth="@ShowMonth"
                 ShowWeek="@ShowWeek"
                 ShowDay="@ShowDay"
                 ShowCurrentTime="@ShowCurrentTime"
                 @bind-View="@View"
                 Items="@_items"
                 ShowToolbar="@ShowToolbar"
                 ShowDatePicker="true"
                 ShowTodayButton="true"
                 ShowDropdownViewSelector="true"
                 ButtonVariant="Variant.Text"
                 Style="padding: 12px;"
                 HighlightToday="true">

        <ToolbarContent>
            @ToolbarContent
        </ToolbarContent>

        <!-- Week / WorkWeek -->
        <WeekTemplate Context="e">
            <MudPaper Class="pa-1" Elevation="0">
                <MudStack Spacing="1">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudChip T="string" Color="@MapStatusToColor(e.Status)" Size="Size.Small"
                                 Variant="Variant.Outlined">
                            @StatusText(e.Status)
                        </MudChip>
                        <MudText Typo="Typo.body2" Class="fw-600">@ToFa(e.ServiceTitle)</MudText>
                    </MudStack>

                    <MudText Typo="Typo.caption">@ToFa($"{e.Start:HH\\:mm} - {e.End:HH\\:mm}")</MudText>
                    <MudText Typo="Typo.caption">@ToFa($"بیمار: {e.PatientFullName}")</MudText>
                    <MudText Typo="Typo.caption">@ToFa($"تلفن: {e.PatientPhone}")</MudText>
                    <MudText Typo="Typo.caption">@ToFa($"مبلغ: {PriceFormat(e.PriceAmount, e.PriceCurrency)}")</MudText>

                    @if (!string.IsNullOrWhiteSpace(e.Notes))
                    {
                        <MudText Typo="Typo.overline" Class="opacity-75">@ToFa(e.Notes!)</MudText>
                    }
                </MudStack>
            </MudPaper>
        </WeekTemplate>

        <!-- Day -->
        <DayTemplate Context="e">
            <MudPaper Class="pa-2" Elevation="0">
                <MudStack Spacing="1">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudChip T="string" Color="@MapStatusToColor(e.Status)" Size="Size.Small"
                                 Variant="Variant.Outlined">
                            @StatusText(e.Status)
                        </MudChip>
                        <MudText Typo="Typo.subtitle2" Class="fw-600">@ToFa(e.ServiceTitle)</MudText>
                    </MudStack>

                    <MudText Typo="Typo.caption">@ToFa($"{e.Start:HH\\:mm} - {e.End:HH\\:mm}")</MudText>

                    <MudList T="string" Dense="true">
                        <MudListItem T="string">@ToFa($"بیمار: {e.PatientFullName}")</MudListItem>
                        <MudListItem T="string">@ToFa($"تلفن: {e.PatientPhone}")</MudListItem>
                        <MudListItem
                            T="string">@ToFa($"مبلغ: {PriceFormat(e.PriceAmount, e.PriceCurrency)}")</MudListItem>
                        @if (!string.IsNullOrWhiteSpace(e.Notes))
                        {
                            <MudListItem T="string">@ToFa($"یادداشت: {e.Notes}")</MudListItem>
                        }
                    </MudList>
                </MudStack>
            </MudPaper>
        </DayTemplate>

        <!-- Month -->
        <MonthTemplate Context="e">
            <MudStack Spacing="1">
                <MudText Typo="Typo.caption" Class="fw-600">@ToFa(e.ServiceTitle)</MudText>
                <MudText Typo="Typo.overline">@ToFa($"{e.Start:HH\\:mm}")</MudText>
            </MudStack>
        </MonthTemplate>
    </MudCalendar>

@code {

    // ---------------------------
    // Public Parameters / API
    // ---------------------------
    [Parameter] public bool ShowToolbar { get; set; } = true;
    [Parameter] public bool ShowMonth { get; set; } = true;
    [Parameter] public bool ShowWeek { get; set; } = true;
    [Parameter] public bool ShowDay { get; set; } = true;
    [Parameter] public bool ShowWorkWeek { get; set; } = true;
    [Parameter] public bool ShowCurrentTime { get; set; } = true;
    [Parameter] public bool RightToLeft { get; set; } = true;
    [Parameter] public DayOfWeek FirstDayOfWeek { get; set; } = DayOfWeek.Saturday;
    [Parameter] public DateTime CurrentDay { get; set; } = DateTime.Today;
    [Parameter] public CalendarView View { get; set; } = CalendarView.WorkWeek;
    [Parameter] public int WorkDayStartHour { get; set; } = 9;
    [Parameter] public int WorkDayEndHour { get; set; } = 18;
    [Parameter] public bool PersianizeDigits { get; set; } = true;

    // امکان سفارشی‌سازی نوار ابزار از بیرون
    [Parameter] public RenderFragment? ToolbarContent { get; set; }

    // هر ویژگی اضافه‌ای که کاربر روی ریشه‌ی کامپوننت بگذارد
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?> UserAttributes { get; set; } = new();

    [Parameter] public IEnumerable<AppointmentResponse>? Appointments { get; set; }


    private List<ClinicCalendarItem> _items = new();

    protected override void OnParametersSet()
    {
        _items = ClinicCalendarItem.FromAppointments(Appointments ?? []);
    }

    // رنگ بر اساس وضعیت وقت
    private static Color MapStatusToColor(AppointmentStatus status)
        => status switch
           {
               AppointmentStatus.Booked    => Color.Info,
               AppointmentStatus.Completed => Color.Success,
               AppointmentStatus.Cancelled => Color.Error,
               AppointmentStatus.NoShow    => Color.Warning,
               AppointmentStatus.EmptySlot => Color.Tertiary,
               _                           => Color.Default
           };


    private static string StatusText(AppointmentStatus e)
    {
        return e switch
               {
                   AppointmentStatus.Booked    => "رزرو",
                   AppointmentStatus.Completed => "انجام‌شده",
                   AppointmentStatus.Cancelled => "لغو",
                   AppointmentStatus.NoShow    => "عدم‌حضور",
                   AppointmentStatus.EmptySlot => "خالی",
                   _                           => "نامشخص"
               };
    }

    private static string PriceFormat(decimal amount, string currency)
    {
        // جداکننده هزارگان + ارز (ریال)
        var s = string.Format(new CultureInfo("fa-IR"), "{0:N0}", amount);
        return $"{s} {currency}";
    }

    private string ToFa(string s)
    {
        if (!PersianizeDigits || string.IsNullOrEmpty(s)) return s;
        // تبدیل اعداد انگلیسی به فارسی
        ReadOnlySpan<char> en  = "0123456789";
        ReadOnlySpan<char> fa  = "۰۱۲۳۴۵۶۷۸۹";
        var                arr = s.ToCharArray();

        for (int i = 0; i < arr.Length; i++)
        {
            var idx              = en.IndexOf(arr[i]);
            if (idx >= 0) arr[i] = fa[idx];
        }

        return new string(arr);
    }

}
