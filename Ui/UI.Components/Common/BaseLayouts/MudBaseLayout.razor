@inject IStringLocalizer<MudBaseLayout> Localizer
@inherits LayoutComponentBase


<MudRTLProvider RightToLeft="Settings?.IsRTL ?? false">

    <MudThemeProvider @ref="@_mudThemeProvider"
                      Theme="@ThemeService.CurrentTheme" ObserveSystemThemeChange
                      IsDarkMode="@ThemeService.IsDarkMode"/>


    <MudBreakpointProvider/>
    <MudPopoverProvider/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>

    <MudLayout class="page">
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style=" padding: 0 !important;">
            @Body
        </MudContainer>
    </MudLayout>
</MudRTLProvider>

@code {
    private MudThemeProvider _mudThemeProvider = null!;
    public Settings? Settings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Settings = await Mediator.Send(new LoadSettingsQuery());
        
        ThemeService.ThemeChanged += HandleThemeChanged!;

        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            await _mudThemeProvider.WatchSystemPreference(ThemeService.OnSystemPreferenceChanged);
            var systemPreference = await _mudThemeProvider.GetSystemPreference();
            ThemeService.ToggleDarkLightMode(systemPreference , false);
        }
    }

    private void HandleThemeChanged(object sender , EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= HandleThemeChanged!;
    }

}
