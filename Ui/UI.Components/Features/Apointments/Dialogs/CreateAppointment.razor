@using System.Globalization
@using App.Applications.Appointments.Requests
@using App.Applications.ClinicServices.Requests.Get
@using App.Applications.ClinicServices.Requests.ListClinicServices
@using App.Applications.Schedules.Requests.GetSlots
@using App.Applications.Users.Queries.GetUserInfo
@using App.Applications.Users.Requests.UserInfos
@using App.Applications.Users.Requests.UserQueries
@using MudBlazor

<MudDialog>
    <TitleContent>ایجاد نوبت جدید</TitleContent>

    <DialogContent>
        <MudStack Class="gap-2" Justify="Justify.SpaceBetween">


            @if (IsPatient || UserId.HasValue)
            {
                <MudTextField
                    Label="بیمار"
                    Value="@($"{_selectedUser!.FullName} ({_selectedUser.Username})")"
                    Variant="Variant.Text"
                    Required="true"
                    ReadOnly="IsPatient"
                    Disabled="@(!_usersLoaded && !IsPatient)"
                />
            }
            else
            {
                <MudSelect T="UserListItemResponse"
                           Label="بیمار"
                           Variant="Variant.Text"
                           Required="true"
                           ReadOnly="IsPatient"
                           Disabled="@(!_usersLoaded && !IsPatient)"
                           ValueChanged="OnUserChanged">
                    @if (Users.Count > 0)
                    {
                        @foreach (var user in Users)
                        {
                            <MudSelectItem Value="@user">@($"{user.FullName} ({user.Username})")</MudSelectItem>
                        }
                    }
                </MudSelect>
            }

            @if (ServiceId.HasValue)
            {
                <MudTextField
                    Label="خدمت / سرویس"
                    Value="@($"{_selectedService!.Title}")"
                    Variant="Variant.Text"
                    Required="true"
                    ReadOnly="IsPatient"
                    Disabled="@(!_usersLoaded && !IsPatient)"/>
            }
            else
            {
                <MudSelect T="ClinicServiceResponse"
                           Label="خدمت / سرویس"
                           Variant="Variant.Text"
                           Required="true"
                           Disabled="@(!_servicesLoaded || ServiceId.HasValue)"
                           ValueChanged="OnServiceChanged">
                    @if (Services.Count > 0)
                    {
                        @foreach (var service in Services)
                        {
                            <MudSelectItem Value="@service">@service.Title</MudSelectItem>
                        }
                    }
                </MudSelect>
            }

            <MudDatePicker Label="تاریخ"
                           Variant="Variant.Text"
                           Culture="@(new CultureInfo("fa-IR"))"
                           DateChanged="OnDateChanged"
                           Required="true"/>

            <MudStack Spacing="1">
                <MudText Typo="Typo.subtitle2">ساعت</MudText>

                @if (_loadingSlots)
                {
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2"/>
                        <MudText>در حال دریافت زمان‌های خالی…</MudText>
                    </MudStack>
                }
                else if (_slots.Count > 0)
                {
                    <MudSelect T="string"
                               Label="انتخاب از زمان‌های خالی"
                               Variant="Variant.Text"
                               Required="true"
                               ValueChanged="OnSlotSelected">
                        @foreach (var slot in _slots)
                        {
                            <MudSelectItem Value="@slot">@slot</MudSelectItem>
                        }
                    </MudSelect>

                    <MudText Color="Color.Success" Typo="Typo.caption">
                        @($"تعداد زمان‌های موجود: {_slots.Count}")
                    </MudText>
                }
                else if (_selectedService is not null && _selectedDate is not null)
                {
                    <MudAlert Severity="Severity.Info" Dense="true">
                        برای این تاریخ، زمان خالی یافت نشد. لطفاً تاریخ دیگری را انتخاب کنید.
                    </MudAlert>
                }
            </MudStack>

            <MudTextField @bind-Value="Model.Notes"
                          Label="توضیحات"
                          Variant="Variant.Text"
                          AutoGrow="true"
                          Placeholder="توضیحات اضافی..."/>


        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">انصراف</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="Save"
                   Disabled="@IsInvalid()"
                   StartIcon="@Icons.Filled.Save">
            ذخیره
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    public CreateAppointmentCommand Model { get; set; } = new();
    [Parameter] public bool IsPatient { get; set; } = true;
    [Parameter] public Guid? ServiceId { get; set; } = null!;
    [Parameter] public long? UserId { get; set; } = null!;

    private readonly List<ClinicServiceResponse> Services = new();
    public List<UserListItemResponse> Users { get; set; } = new();

    private UserListItemResponse?  _selectedUser;
    private ClinicServiceResponse? _selectedService;

    private bool _usersLoaded;
    private bool _servicesLoaded;

    // تاریخ و اسلات‌ها
    private DateTime?    _selectedDate;
    private bool         _loadingSlots;
    private List<string> _slots = new();
    private string?      _selectedSlot; // HH:mm

    // لغو درخواست‌های قبلی اسلات
    private CancellationTokenSource? _slotCts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Services
            if (!ServiceId.HasValue)
            {
                var services = await Mediator.Send(new ListClinicServicesRequest());
                Services.Clear();

                if (services is not null)
                    Services.AddRange(services.Where(s => s is not null)!);

                _servicesLoaded = true;
            }
            else
            {
                var services = await Mediator.Send(new GetClinicServiceByIdRequest(ServiceId.Value));
                Services.Clear();

                if (services is not null)
                    Services.Add(services!);

                _selectedService = services;
                Model.ServiceId  = services!.Id;
                _servicesLoaded  = true;
            }

            if (Services.Count == 0)
            {
                Snackbar.ShowInfo("خدمتی برای انتخاب وجود ندارد.");
                MudDialog.Close();
                return;
            }

            if (UserId.HasValue)
            {
                var me = await Mediator.Send(new UserInfoByIdRequest(UserId.Value));
                _selectedUser = me?.Adapt<UserListItemResponse>();
                _usersLoaded  = true;

                if (_selectedUser is not null)
                {
                    Model.PatientFullName = _selectedUser.FullName;
                    Model.PatientPhone    = _selectedUser.Username; // یا PhoneNumber اگر دارید
                }
            }
            else if (!IsPatient)
            {
                var usersRes = await Mediator.Send(new UsersQueryRequest
                {
                    IsSecretaries = false,
                    Page          = 1,
                    PageSize      = int.MaxValue,
                });

                Users        = usersRes?.Items?.Where(u => u is not null).ToList() ?? new List<UserListItemResponse>();
                _usersLoaded = true;
            }
            else
            {
                var me = await Mediator.Send(new UserInfoRequest());
                _selectedUser = me?.Adapt<UserListItemResponse>();
                _usersLoaded  = true;

                if (_selectedUser is not null)
                {
                    Model.PatientFullName = _selectedUser.FullName;
                    Model.PatientPhone    = _selectedUser.Username; // یا PhoneNumber اگر دارید
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.ShowError($"خطا در بارگذاری داده‌ها: {ex.Message}");
            MudDialog.Close();
        }
    }

    /* ------------------- همگام‌سازی‌ها ------------------- */

    private void OnUserChanged(UserListItemResponse? user)
    {
        _selectedUser = user;

        if (user is null)
        {
            Model.PatientFullName = null;
            Model.PatientPhone    = null;
            return;
        }

        Model.PatientFullName = user.FullName;
        Model.PatientPhone    = user.Username;
    }

    private async Task OnServiceChanged(ClinicServiceResponse? svc)
    {
        _selectedService = svc;
        Model.ServiceId  = svc?.Id ?? Guid.Empty;

        ResetSlots();
        await TryLoadSlotsAsync();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        _selectedDate = date;

        if (date.HasValue)
            Model.Date = DateOnly.FromDateTime(date!.Value);
        else
            Model.Date = null!;

        ResetSlots();
        await TryLoadSlotsAsync();
    }

    private void OnSlotSelected(string? hhmm)
    {
        _selectedSlot = hhmm;
        Model.Start   = hhmm ?? string.Empty;
    }

    private void ResetSlots()
    {
        _slots.Clear();
        _selectedSlot = null;
        Model.Start   = string.Empty;
    }

    /* ------------------- گرفتن اسلات‌ها با لغوپذیری ------------------- */

    private async Task TryLoadSlotsAsync()
    {
        if (_selectedService is null || _selectedDate is null)
        {
            _loadingSlots = false;
            StateHasChanged();
            return;
        }

        _slotCts?.Cancel();
        _slotCts = new CancellationTokenSource();
        var token = _slotCts.Token;

        _loadingSlots = true;
        StateHasChanged();

        try
        {
            var dateOnly = DateOnly.FromDateTime(_selectedDate.Value);
            var req      = new GetAvailableSlotsRequest(dateOnly, _selectedService.Id);

            var result = await Mediator.Send(req, token);
            if (token.IsCancellationRequested) return;

            _slots = (result ?? new List<string>()).Where(s => !string.IsNullOrWhiteSpace(s)).
                                                    Distinct().
                                                    OrderBy(s => s) // فرض بر فرمت HH:mm
                                                    .
                                                    ToList();

            // Optional: پیش‌انتخاب اولین اسلات
            if (_slots.Count > 0)
            {
                _selectedSlot = _slots[0];
                Model.Start   = _selectedSlot;
            }
        }
        catch (OperationCanceledException)
        {
            /* ignore */
        }
        catch (Exception ex)
        {
            Snackbar.ShowError($"دریافت زمان‌های خالی ناموفق بود: {ex.Message}");
            _slots.Clear();
        }
        finally
        {
            if (!token.IsCancellationRequested)
            {
                _loadingSlots = false;
                StateHasChanged();
            }
        }
    }

    /* ------------------- اکشن‌ها ------------------- */

    private void Cancel()
        => MudDialog.Cancel();

    private async Task Save()
    {
        if (_selectedService is not null)
            Model.ServiceId = _selectedService.Id;

        if (_selectedUser is not null)
        {
            Model.PatientFullName ??= _selectedUser.FullName;
            Model.PatientPhone    ??= _selectedUser.Username;
        }

        await Mediator.Send(Model);
        MudDialog.Close();
    }

    /* ------------------- اعتبارسنجی ------------------- */

    private bool IsInvalid()
    {
        var hasTime = !string.IsNullOrWhiteSpace(Model.Start);

        return Model.ServiceId == Guid.Empty || _selectedDate is null || !hasTime || string.IsNullOrWhiteSpace(Model.PatientFullName) || string.IsNullOrWhiteSpace(Model.PatientPhone);
    }

}
