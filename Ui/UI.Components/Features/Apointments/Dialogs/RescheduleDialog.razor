
@using App.Applications.Schedules.Requests.GetSlots


<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            <!-- Header -->
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6" Class="font-bold">تغییر زمان نوبت</MudText>
                <MudIcon Icon="@MaterialIcons.Filled.Event" Size="Size.Medium"/>
            </MudStack>

            <MudForm @ref="_form" Model="Model" >
                <MudGrid Class="mt-2">
                    <!-- تاریخ -->
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="تاریخ جدید"
                                       Variant="Variant.Outlined"
                                       Culture="@(new CultureInfo("fa-IR"))"
                                       DateFormat="yyyy/MM/dd"
                                       PickerVariant="PickerVariant.Inline"
                                       Date="@(_dateValue)"
                                       DateChanged="OnDateChanged"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@MaterialIcons.Filled.DateRange"
                                       OpenTo="OpenTo.Date"/>
                    </MudItem>

                    <!-- ساعت (از اسلات‌های خالی) -->
                    <MudItem xs="12" sm="6">
                        <MudStack Spacing="1">
                            @if (_loadingSlots)
                            {
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2"/>
                                    <MudText>در حال دریافت زمان‌های خالی…</MudText>
                                </MudStack>
                            }
                            else if (_slots.Count > 0)
                            {
                                <MudSelect T="string"
                                           Label="انتخاب از زمان‌های خالی"
                                           Variant="Variant.Outlined"
                                           Required="true"
                                           Value="_selectedSlot"
                                           ValueChanged="OnSlotSelected">
                                    @foreach (var slot in _slots)
                                    {
                                        <MudSelectItem Value="@slot">@slot</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudText Color="Color.Success" Typo="Typo.caption">
                                    @($"تعداد زمان‌های موجود: {_slots.Count}")
                                </MudText>
                            }
                            else if (_dateValue is not null && Model.ServiceId != Guid.Empty)
                            {
                                <MudAlert Severity="Severity.Info" Dense="true">
                                    برای این تاریخ، زمان خالی یافت نشد. لطفاً تاریخ دیگری را انتخاب کنید.
                                </MudAlert>
                            }
                            else if (Model.ServiceId == Guid.Empty)
                            {
                                <MudAlert Severity="Severity.Warning" Dense="true">
                                    ServiceId نامعتبر است. بدون شناسه سرویس امکان دریافت اسلات وجود ندارد.
                                </MudAlert>
                            }
                        </MudStack>
                    </MudItem>

                    <!-- توضیحات -->
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Model.Notes"
                                      Label="توضیحات"
                                      Variant="Variant.Outlined"
                                      Lines="2"
                                      AutoGrow="true"
                                      HelperText="(اختیاری) هر نکته‌ای که باید به منشی/پزشک منتقل شود"/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">
            انصراف
        </MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@MaterialIcons.Filled.Save"
                   Disabled="@(_submitting || _disableSubmit)"
                   OnClick="Submit">
            ثبت
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public RescheduleModel Model { get; set; } = new();

    private MudForm? _form;
    private bool     _submitting;

    private DateTime?    _dateValue;    // برای MudDatePicker
    private string?      _selectedSlot; // HH:mm
    private bool         _loadingSlots;
    private List<string> _slots = new();

    private CancellationTokenSource? _slotCts;

    private bool _disableSubmit => Model.ServiceId == Guid.Empty ||
                                   !_dateValue.HasValue ||
                                   string.IsNullOrWhiteSpace(_selectedSlot) ||
                                   !IsValidHHmm(_selectedSlot!);

    protected override async Task OnInitializedAsync()
    {
        // Sync initial date
        _dateValue = Model.Date == default ? null : Model.Date.ToDateTime(TimeOnly.MinValue);

        // Sync initial slot (if Start already set)
        if (!string.IsNullOrWhiteSpace(Model.Start) && IsValidHHmm(Model.Start))
            _selectedSlot = NormalizeTimeString(Model.Start);

        // اگر سرویس و تاریخ داریم، اسلات‌ها را بگیر
        if (Model.ServiceId != Guid.Empty && _dateValue is not null)
            await TryLoadSlotsAsync();
    }

    private void OnDateChanged(DateTime? dt)
    {
        _dateValue = dt;
        if (dt.HasValue)
            Model.Date = DateOnly.FromDateTime(dt.Value);

        _selectedSlot = null;
        Model.Start = string.Empty;
        _ = TryLoadSlotsAsync();
    }

    private void OnSlotSelected(string? hhmm)
    {
        _selectedSlot = hhmm;
        Model.Start = hhmm ?? string.Empty;
    }

    private async Task TryLoadSlotsAsync()
    {
        if (Model.ServiceId == Guid.Empty || _dateValue is null)
        {
            _slots.Clear();
            _loadingSlots = false;
            StateHasChanged();
            return;
        }

        _slotCts?.Cancel();
        _slotCts = new CancellationTokenSource();
        var token = _slotCts.Token;

        _loadingSlots = true;
        StateHasChanged();

        try
        {
            var req    = new GetAvailableSlotsRequest(DateOnly.FromDateTime(_dateValue.Value), Model.ServiceId);
            var result = await Mediator.Send(req, token);

            if (token.IsCancellationRequested) return;

            _slots = (result ?? new List<string>())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Select(NormalizeTimeString)
                .Where(IsValidHHmm)
                .Distinct()
                .OrderBy(s => s)
                .ToList();

        
            if (!string.IsNullOrWhiteSpace(_selectedSlot) && _slots.Contains(_selectedSlot))
            {
                Model.Start = _selectedSlot!;
            }
            else
            {
                _selectedSlot = _slots.FirstOrDefault();
                Model.Start = _selectedSlot ?? string.Empty;
            }
        }
        catch (Exception ex)
        {
            _slots.Clear();
            _selectedSlot = null;
            Model.Start = string.Empty;
        }
        finally
        {
            if (!token.IsCancellationRequested)
            {
                _loadingSlots = false;
                StateHasChanged();
            }
        }
    }

    private async Task Submit()
    {
        _submitting = true;

        try
        {
            if (_form is not null)
            {
                await _form.Validate();
                if (!_form.IsValid) return;

                // همگام‌سازی نهایی
                if (_dateValue.HasValue)
                    Model.Date = DateOnly.FromDateTime(_dateValue.Value);

                if (!string.IsNullOrWhiteSpace(_selectedSlot))
                    Model.Start = NormalizeTimeString(_selectedSlot!);

                MudDialog.Close(DialogResult.Ok(Model));
            }
        }
        finally
        {
            _submitting = false;
        }
    }

    private void Cancel()
        => MudDialog.Cancel();


    private static string NormalizeTimeString(string input)
    {
        var v = input.Trim();
        if (v.Length == 4 && !v.Contains(':')) // "1430" -> "14:30"
            v = $"{v[..2]}:{v[2..]}";
        // صفرگذاری دقیقه/ساعت تک‌رقمی (مثلاً "9:5" -> "09:05")
        if (TimeSpan.TryParse(v, out var t))
            return $"{(int)t.TotalHours:00}:{t.Minutes:00}";
        return v;
    }

    private static bool IsValidHHmm(string v)
        => TimeSpan.TryParse(v, out var t) && t >= TimeSpan.Zero && t < TimeSpan.FromDays(1);

    public class RescheduleModel
    {
        public Guid ServiceId { get; set; }
        public DateOnly Date { get; set; }
        public string Start { get; set; } = "";
        public string? Notes { get; set; }
    }
}
