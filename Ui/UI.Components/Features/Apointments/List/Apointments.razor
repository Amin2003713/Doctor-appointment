@page "/doctor/agenda"
@using App.Applications.Appointments.Requests

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pt-4">

    <!-- Filters (same as before)… -->
    @if (ShowFilters)
    {
        <MudPaper Class="rounded-xl mb-3 px-3 py-2 p-2">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6" Class="fw-bold">برنامه‌ی نوبت‌ها</MudText>
                <MudSpacer/>
                @if (!PatientUserId.HasValue)
                {
                    <MudDateRangePicker @bind-DateRange="_dateRange"
                                        Label="بازهٔ زمانی"
                                        Variant="Variant.Text"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@MaterialIcons.Filled.DateRange"
                                        Class="min-w-64"
                                        Culture="@(new CultureInfo("fa-IR"))"/>
                }
                <MudSelect T="AppointmentStatus?" @bind-Value="_status" Dense="true"
                           Variant="Variant.Text"
                           OnBlur="RefreshTable"
                           Label="وضعیت">
                    <MudSelectItem T="AppointmentStatus?" Value="@((AppointmentStatus?)null)">همه</MudSelectItem>
                    <MudSelectItem T="AppointmentStatus?" Value="@AppointmentStatus.Booked">رزروشده</MudSelectItem>
                    <MudSelectItem T="AppointmentStatus?" Value="@AppointmentStatus.Completed">انجام‌شده</MudSelectItem>
                    <MudSelectItem T="AppointmentStatus?" Value="@AppointmentStatus.Cancelled">لغوشده</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="_search"
                              Placeholder="جستجو (بیمار/خدمت/توضیحات/شماره)"
                              Variant="Variant.Text"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@MaterialIcons.Filled.Search"
                              Immediate="true"
                              DebounceInterval="400"
                              Clearable="true"
                              OnBlur="RefreshTable"
                              Class="min-w-72"/>

                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="RefreshTable"
                           StartIcon="@MaterialIcons.Filled.Refresh">اعمال
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ClearFilters"
                           StartIcon="@MaterialIcons.Filled.Restore">بازنشانی
                </MudButton>
            </MudStack>
        </MudPaper>
    }

    <!-- Table -->
    <MudPaper Elevation="2" Class="rounded-xl overflow-hidden ">
        <MudTable T="AppointmentResponse"
                  ServerData="LoadServerData"
                  Class="rounded-xl"
                  Dense
                  Hover
                  Virtualize
                  FixedHeader
                  ContainerClass="text-center"
                  RowClass="text-center"
                  Breakpoint="Breakpoint.MdAndDown"
                  Height="68vh"
                  CanCancelEdit
                  RowsPerPage="20"
                  @ref="_table">

            <ToolBarContent>
                <MudBadge Content="@_totalCount.ToString()" Origin="Origin.CenterLeft" Color="Color.Transparent">
                    <MudText Typo="Typo.h5" Class="fw-bold" Style="margin: 8px">
                        نوبت‌ها
                    </MudText>
                </MudBadge>

                <MudSpacer/>
                @if (!PatientUserId.HasValue)
                {
                    <MudText Typo="Typo.caption" Color="Color.Secondary">@ToolbarCaption</MudText>
                }
            </ToolBarContent>

            <HeaderContent>
                @if (ShowFilters)
                {
                    <MudTh>خدمت</MudTh>

                    <MudTh>تاریخ</MudTh>

                    <MudTh>ساعت</MudTh>

                    <MudTh>وضعیت</MudTh>

                    <MudTh>نام بیمار</MudTh>

                    <MudTh>تلفن</MudTh>

                    <MudTh>هزینه</MudTh>

                    <MudTh>یادداشت</MudTh>

                    <MudTh>اقدامات</MudTh>
                }
                else
                {
                    <MudTh>خدمت</MudTh>

                    <MudTh>ساعت</MudTh>

                    <MudTh>وضعیت</MudTh>

                    <MudTh>نام بیمار</MudTh>

                    <MudTh>تلفن</MudTh>
                }
            </HeaderContent>

            <RowTemplate>
                @if (ShowFilters)
                {
                    <MudTd DataLabel="خدمت">
                        <MudText>@context.ServiceTitle</MudText>
                    </MudTd>

                    <MudTd DataLabel="تاریخ">
                        <MudRTLProvider>
                            <MudText
                                Align="Align.Start">@context.Date.ToDateTime(TimeOnly.MinValue).ToString("yyyy/MM/dd")</MudText>
                        </MudRTLProvider>
                    </MudTd>

                    <MudTd DataLabel="ساعت">
                        <MudRTLProvider RightToLeft="false">
                            <MudText Align="Align.Start">@context.Start - @context.End</MudText>
                        </MudRTLProvider>
                    </MudTd>

                    <MudTd DataLabel="وضعیت">
                        <MudChip T="string" Color="@StatusColor(context.Status)" Variant="Variant.Filled"
                                 Size="Size.Small"
                                 Icon="@StatusIcon(context.Status)">
                            @StatusText(context.Status)
                        </MudChip>
                    </MudTd>

                    <MudTd DataLabel="نام بیمار">
                        <MudText>@(string.IsNullOrWhiteSpace(context.PatientFullName) ? "-" : context.PatientFullName)</MudText>
                    </MudTd>

                    <MudTd DataLabel="تلفن">
                        <MudRTLProvider RightToLeft="false">
                            <MudText Align="Align.Start">@NormalizePhone(context.PatientPhone)</MudText>
                        </MudRTLProvider>
                    </MudTd>

                    <MudTd HideSmall DataLabel="هزینه">
                        <MudText>@context.PriceAmount.ToString("N0") @context.PriceCurrency</MudText>
                    </MudTd>

                    <MudTd HideSmall DataLabel="یادداشت">
                        <MudText>@(string.IsNullOrWhiteSpace(context.Notes) ? "-" : context.Notes)</MudText>
                    </MudTd>

                    <!-- ACTIONS (role-based) -->

                    <MudTd DataLabel="اقدامات">
                        <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                            <!-- view details: everyone -->
                            <MudIconButton Icon="@MaterialIcons.Filled.Visibility"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="@(() => ViewDetails(context))"
                                           Title="جزئیات"/>

                            <MudIconButton Icon="@MaterialIcons.Filled.Schedule"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           OnClick="@(() => OpenRescheduleDialog(context))">
                                تغییر زمان
                            </MudIconButton>
                            @if (IsBooked(context))
                            {
                                <MudIconButton Icon="@MaterialIcons.Filled.Cancel"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => ConfirmAndCancel(context))">
                                    لغو نوبت
                                </MudIconButton>
                            }

                            <!-- Doctor/Secretary: complete, reschedule, cancel (when Booked) -->
                            <AuthorizeView Roles="Doctor,Secretary">
                                <Authorized Context="Auth">
                                    @if (IsBooked(context))
                                    {
                                        <MudIconButton Icon="@MaterialIcons.Filled.CheckCircle"
                                                       Color="Color.Success"
                                                       Size="Size.Small"
                                                       OnClick="@(() => MarkComplete(context))">
                                            علامت‌گذاری انجام‌شده
                                        </MudIconButton>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudStack>
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="خدمت">
                        <MudText>@context.ServiceTitle</MudText>
                    </MudTd>

                    <MudTd DataLabel="ساعت">
                        <MudText Align="Align.Start">@context.Start تا @context.End</MudText>
                    </MudTd>

                    <MudTd DataLabel="وضعیت">
                        <MudChip T="string" Color="@StatusColor(context.Status)" Variant="Variant.Filled"
                                 Size="Size.Small"
                                 Icon="@StatusIcon(context.Status)">
                            @StatusText(context.Status)
                        </MudChip>
                    </MudTd>

                    <MudTd DataLabel="نام بیمار">
                        <MudText>@(string.IsNullOrWhiteSpace(context.PatientFullName) ? "-" : context.PatientFullName)</MudText>
                    </MudTd>

                    <MudTd DataLabel="تلفن">
                        <MudRTLProvider RightToLeft="false">
                            <MudText Align="Align.End">@NormalizePhone(context.PatientPhone)</MudText>
                        </MudRTLProvider>
                    </MudTd>
                }
            </RowTemplate>

            <LoadingContent>
                <MudStack Spacing="1" Class="p-4">
                    @for (var i = 0; i < 6; i++)
                    {
                        <MudSkeleton Height="38px" Width="100%" Animation="Animation.Wave"/>
                    }
                </MudStack>
            </LoadingContent>

            <NoRecordsContent>
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2" Class="py-14">
                    <MudIcon Icon="@MaterialIcons.Filled.SearchOff" Size="Size.Large" Color="Color.Default"/>
                    <MudText Typo="Typo.h6">موردی یافت نشد</MudText>
                    <MudText Typo="Typo.body2"
                             Color="Color.Secondary">@(ShowFilters ? "فیلترها را تغییر دهید یا بازنشانی کنید." : "نوبتی برای امروز درج نشده")</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="ClearFilters">
                        @(ShowFilters ? "بازنشانی فیلترها" : "")
                    </MudButton>
                </MudStack>
            </NoRecordsContent>

            <PagerContent>
                <MudTablePager InfoFormat="نمایش {first_item}-{last_item} از {all_items}"/>
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter] public Action UpdateUi { get; set; } = default!;

    private void TriggerParentUpdate()
    {
        UpdateUi?.Invoke(); // Call the parent's UpdateUi method
    }

    private MudTable<AppointmentResponse>? _table;

    private DateRange?         _dateRange = new(DateTime.Today, DateTime.Today.AddDays(7));
    private AppointmentStatus? _status;
    private string?            _search;

    private List<AppointmentResponse> _all = null!;
    private long                      _totalCount;

    [Parameter] [SupplyParameterFromQuery] public long? PatientUserId { get; set; }
    [Parameter] [SupplyParameterFromQuery] public DateOnly? From { get; set; }
    [Parameter] [SupplyParameterFromQuery] public DateOnly? To { get; set; }
    [Parameter] public bool ShowFilters { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        if (From.HasValue || To.HasValue)
        {
            var start = From?.ToDateTime(TimeOnly.MinValue) ?? _dateRange?.Start ?? DateTime.Today;
            var end   = To?.ToDateTime(TimeOnly.MinValue)   ?? _dateRange?.End   ?? DateTime.Today;
            _dateRange = new DateRange(start, end);
        }

        await ReloadData();
    }

    private async Task<TableData<AppointmentResponse>> LoadServerData(TableState state, CancellationToken ct)
    {
        // اگر هنوز داده‌ای لود نشده، یک‌بار لود کن
        if (_all is null)
            await ReloadData();

        IEnumerable<AppointmentResponse> q = _all!;

        if (_status.HasValue)
            q = q.Where(a => a.Status == _status.Value);

        if (!string.IsNullOrWhiteSpace(_search))
        {
            var s = _search.Trim();

            q = q.Where(a =>
                            (a.PatientFullName?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (a.PatientPhone?.Contains(s, StringComparison.OrdinalIgnoreCase)    ?? false) ||
                            (a.ServiceTitle?.Contains(s, StringComparison.OrdinalIgnoreCase)    ?? false) ||
                            (a.Notes?.Contains(s, StringComparison.OrdinalIgnoreCase)           ?? false));
        }

        // Sort to prioritize today's appointments, then by date descending, then by start time
        var today = DateTime.Today;

        q = q.OrderBy(a => (a.Date == DateOnly.FromDateTime(today)) ? 0 : 1).
              ThenByDescending(a => a.Date).
              ThenBy(a => a.Start);

        _totalCount = q.LongCount();

        var pageItems = q.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<AppointmentResponse>
        {
            Items      = pageItems,
            TotalItems = (int)Math.Min(int.MaxValue, _totalCount)
        };
    }

    private async Task ReloadData()
    {
        try
        {
            var fromDo = _dateRange?.Start is not null ? DateOnly.FromDateTime(_dateRange!.Start!.Value) : From ?? DateOnly.FromDateTime(DateTime.Today);
            var toDo   = _dateRange?.End is not null ? DateOnly.FromDateTime(_dateRange!.End!.Value) : To       ?? DateOnly.FromDateTime(DateTime.Today.AddDays(7));

            var list = await Mediator.Send(new GetAppointmentsQuery(fromDo, toDo, PatientUserId));
            _all        = list.OrderBy(a => a.Start).ToList() ?? [];
            _totalCount = _all.Count;
            await _table!.ReloadServerData();
            StateHasChanged();
        }
        catch
        {
            _all        = new List<AppointmentResponse>();
            _totalCount = 0;
            Snackbar.ShowError("خطا در دریافت نوبت‌ها");
        }
    }

    private void RefreshTable()
    {
        _ = _table?.ReloadServerData();
    }

    private void ClearFilters()
    {
        _dateRange = new DateRange(DateTime.Today, DateTime.Today.AddDays(7));
        _status    = null;
        _search    = null;
        _          = ReloadData();
    }

    private string ToolbarCaption => _dateRange is { Start: not null, End: not null }
        ? $"از {_dateRange!.Start:yyyy/MM/dd} تا {_dateRange!.End:yyyy/MM/dd}"
        : "بازهٔ زمانی انتخاب‌شده";

    // ===== Row action handlers =====
    private async Task ViewDetails(AppointmentResponse appt)
    {
        var md = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth         = MaxWidth.Small,
            FullWidth        = true
        };

        var parameters = new DialogParameters<ApointmentInfoDialog>
        {
            {
                x => x.Model, appt
            }
        };

        await DialogService.ShowAsync<ApointmentInfoDialog>("", parameters, md);
    }

    private async Task ConfirmAndCancel(AppointmentResponse appt)
    {
        if (!IsBooked(appt)) return;

        var confirm = await DialogService.ShowMessageBox(
            "تأیید لغو",
            $"آیا از لغو نوبت {appt.ServiceTitle} در تاریخ {appt.Date:yyyy/MM/dd} ساعت {appt.Start} مطمئن هستید؟",
            "بله، لغو کن",
            cancelText: "انصراف",
            options: new DialogOptions
            {
                CloseOnEscapeKey = true
            });

        if (confirm != true) return;

        try
        {
            await Mediator.Send(new CancelAppointmentCommand(appt.Id), CancellationToken.None);
            Snackbar.ShowSuccess("نوبت لغو شد.");
            await ReloadData();
            TriggerParentUpdate();
        }
        catch (Exception ex)
        {
            Snackbar.ShowError($"خطا در لغو نوبت: {ex.Message}");
        }
    }

    private async Task MarkComplete(AppointmentResponse appt)
    {
        if (!IsBooked(appt)) return;

        try
        {
            await Mediator.Send(new CompleteAppointmentCommand(appt.Id), CancellationToken.None);
            Snackbar.ShowSuccess("نوبت با موفقیت انجام‌شده علامت خورد.");
            await ReloadData();
            TriggerParentUpdate();
        }
        catch (Exception ex)
        {
            Snackbar.ShowError($"خطا در ثبت انجام‌شده: {ex.Message}");
        }
    }

    private async Task OpenRescheduleDialog(AppointmentResponse appt)
    {
        if (!IsBooked(appt)) return;

        var parameters = new DialogParameters<RescheduleDialog>
        {
            {
                x => x.Model, new RescheduleDialog.RescheduleModel
                {
                    ServiceId     = appt.ServiceId,
                    Date          = appt.Date,
                    Start         = appt.Start,
                    Notes         = appt.Notes,
                    PatientUserId = appt.PatientId
                }
            }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth         = MaxWidth.ExtraSmall,
            FullWidth        = true,
            NoHeader         = true
        };

        var dlg = await DialogService.ShowAsync<RescheduleDialog>("تغییر زمان نوبت", parameters, options);
        var res = await dlg.Result;

        if (!res.Canceled && res.Data is RescheduleDialog.RescheduleModel m)
        {
            try
            {
                await Mediator.Send(new RescheduleAppointmentCommand
                                    {
                                        ServiceId       = m.ServiceId,
                                        Date            = m.Date,
                                        Start           = m.Start,
                                        Notes           = m.Notes,
                                        Id              = appt.Id,
                                        PatientFullName = appt.PatientFullName,
                                        PatientPhone    = appt.PatientPhone
                                    },
                                    CancellationToken.None);

                Snackbar.ShowSuccess("زمان نوبت با موفقیت تغییر کرد.");
                await ReloadData();
                TriggerParentUpdate();
            }
            catch (Exception ex)
            {
                Snackbar.ShowError($"خطا در تغییر زمان: {ex.Message}");
            }
        }
    }

    // ===== Helpers =====
    private static bool IsBooked(AppointmentResponse a)
    {
        return a.Status == AppointmentStatus.Booked;
    }

    private static string NormalizePhone(string? phone)
    {
        return string.IsNullOrWhiteSpace(phone) ? "-" : phone.Replace("+98", "0");
    }

    private static Color StatusColor(AppointmentStatus s)
    {
        return s switch
               {
                   AppointmentStatus.Booked    => Color.Info,
                   AppointmentStatus.Completed => Color.Success,
                   AppointmentStatus.Cancelled => Color.Error,
                   (AppointmentStatus)9999     => Color.Error,
                   _                           => Color.Default
               };
    }

    private static string StatusIcon(AppointmentStatus s)
    {
        return s switch
               {
                   AppointmentStatus.Booked    => MaterialIcons.Filled.Event,
                   AppointmentStatus.Completed => MaterialIcons.Filled.CheckCircle,
                   AppointmentStatus.Cancelled => MaterialIcons.Filled.Block,
                   _                           => MaterialIcons.Filled.Help
               };
    }

    private static string StatusText(AppointmentStatus s)
    {
        return s switch
               {
                   AppointmentStatus.Booked    => "رزروشده",
                   AppointmentStatus.Completed => "انجام‌شده",
                   AppointmentStatus.Cancelled => "لغوشده",
                   _                           => "نامشخص"
               };
    }

}