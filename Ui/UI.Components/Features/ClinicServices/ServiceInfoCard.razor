@page "/clinic-services"
@using App.Applications.ClinicServices.Requests.Get
@using App.Applications.ClinicServices.Requests.ListClinicServices
@using Microsoft.AspNetCore.Components.Authorization


<MudPaper Class="pa-4" MaxHeight="400" MaxWidth="400">
    <MudText Typo="Typo.h5" GutterBottom="true">لیست خدمات کلینیک</MudText>

    <MudTextField @bind-Value="_searchString"
                  Placeholder="جستجو..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Filled.Search"
                  Class="mb-4"/>

    <MudTable Items="_services"
              ServerData="LoadServerData"
              Filter="FilterFunc"
              Hover="true"
              Dense="true"
              ItemSize="10"
              Height="250"
Virtualize="true"
              Bordered="true"
              Striped="true"
              Breakpoint="Breakpoint.Xs"
              SortLabel="مرتب‌سازی بر اساس"
              RowsPerPage="5"
    >

        <HeaderContent>
            <MudTh>کد</MudTh>
            <MudTh>عنوان</MudTh>
            <MudTh>توضیحات</MudTh>
            <MudTh>هزینه</MudTh>
            <MudTh>مدت ویزیت</MudTh>
            <MudTh>فعال</MudTh>
            <MudTh>عملیات</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd HideSmall DataLabel="کد">@context.Code</MudTd>
            <MudTd DataLabel="عنوان">@context.Title</MudTd>
            <MudTd HideSmall DataLabel="توضیحات">@context.Description</MudTd>
            <MudTd DataLabel="هزینه">@($"{context.PriceAmount:n0} {context.PriceCurrency}")</MudTd>
            <MudTd HideSmall DataLabel="مدت ویزیت">@($"{context.VisitMinutes} دقیقه")</MudTd>
            <MudTd HideSmall DataLabel="فعال">
                <MudSwitch T="bool" Disabled="true" bind-Value="@context.IsActive" Color="Color.Success"/>
            </MudTd>
            <MudTd HideSmall DataLabel="عملیات">
                <AuthorizeView Roles="Doctor">
                    <Authorized Context="auth">
                        <MudTooltip Text="ویرایش">
                            <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Primary"
                                           OnClick="@(() => Edit(context))"/>
                        </MudTooltip>
                        <MudTooltip Text="حذف">
                            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error"
                                           OnClick="@(() => Delete(context))"/>
                        </MudTooltip>
                        <MudTooltip Text="رزرو نوبت">
                            <MudIconButton Icon="@Icons.Filled.PersonAdd" Color="Color.Error"
                                           OnClick="@(() => Delete(context))"/>
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>


                <AuthorizeView Roles="Patient,Secretary">
                    <Authorized Context="auth">
                        <MudTooltip Text="رزرو نوبت">
                            <MudIconButton Icon="@Icons.Filled.PersonAdd" Color="Color.Error"
                                           OnClick="@(() => Delete(context))"/>
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager HideRowsPerPage RowsPerPageString="تعداد در هر صفحه:" AllItemsText="همه"/>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private string?                     _searchString;
    private List<ClinicServiceResponse> _services = new();

    private async Task<TableData<ClinicServiceResponse>> LoadServerData(TableState state , CancellationToken cancellationToken)
    {
        try
        {
            var result = await Mediator.Send(new ListClinicServicesRequest(), cancellationToken);

            _services = result;

            var filtered = _services
                .Where(x => string.IsNullOrWhiteSpace(_searchString) || x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

            IEnumerable<ClinicServiceResponse> data = state.SortLabel switch
                                                      {
                                                          "کد"    => state.SortDirection == SortDirection.Descending ? filtered.OrderByDescending(x => x.Code) : filtered.OrderBy(x => x.Code),
                                                          "عنوان" => state.SortDirection == SortDirection.Descending ? filtered.OrderByDescending(x => x.Title) : filtered.OrderBy(x => x.Title),
                                                          "هزینه" => state.SortDirection == SortDirection.Descending ? filtered.OrderByDescending(x => x.PriceAmount) : filtered.OrderBy(x => x.PriceAmount),
                                                          _       => filtered
                                                      };

            var page = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

            return new TableData<ClinicServiceResponse>
            {
                Items = page,
                TotalItems = filtered.Count()
            };
        }
        catch (Exception ex)
        {
            Snackbar.ShowError($"خطا در بارگذاری داده‌ها: {ex.Message}");
            return new TableData<ClinicServiceResponse>
            {
                Items = new List<ClinicServiceResponse>(),
                TotalItems = 0
            };
        }
    }

    private bool FilterFunc(ClinicServiceResponse service)
        => string.IsNullOrWhiteSpace(_searchString) || service.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || service.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase);

    private void Edit(ClinicServiceResponse service)
    {
        Snackbar.ShowInfo($"ویرایش خدمت: {service.Title}");
    }

    private void Delete(ClinicServiceResponse service)
    {
        Snackbar.ShowWarning($"حذف خدمت: {service.Title}");
    }

}
