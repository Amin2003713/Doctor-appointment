@using MediatR
@using MudBlazor
@using App.Applications.DrugStore.Queries
@using App.Applications.DrugStore.Responses
@using System.Linq.Expressions

<MudAutocomplete @ref="Select" T="DrugAutocompleteItem"
                 Value="Value"
                 ValueChanged="OnInnerValueChanged"
                 ToStringFunc="GetText"
                 SearchFunc="Search"
                 MinCharacters="@MinCharacters"
                 DebounceInterval="@Debounce"
                 ResetValueOnEmptyText="true"
                 Clearable="true"
                 Dense="@Dense"
                 Variant="@Variant"
                 Placeholder="@Placeholder"
                 ProgressIndicatorColor="Color.Warning"
                 Adornment="Adornment.Start"
                 Label="@Label"
                 AdornmentIcon="@Icons.Outlined.Medication"
                 Class="w-full">
    <ProgressIndicatorInPopoverTemplate>
        <MudList T="string" ReadOnly>
            <MudListItem>Loading...</MudListItem>
        </MudList>
    </ProgressIndicatorInPopoverTemplate>
</MudAutocomplete>

@code {

    // ----- Binding -----
    [Parameter] public DrugAutocompleteItem? Value { get; set; }
    [Parameter] public EventCallback<DrugAutocompleteItem?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<DrugAutocompleteItem?>>? ValueExpression { get; set; }

    // ----- UX Tweaks -----
    [Parameter] public string Placeholder { get; set; } = "Search drugs…";
    [Parameter] public string Label { get; set; } = "drug Search";
    [Parameter] public bool Dense { get; set; } = false;
    [Parameter] public int MinCharacters { get; set; } = 2;
    [Parameter] public int Debounce { get; set; } = 300;
    [Parameter] public int Limit { get; set; } = 10;
    [Parameter] public Func<DrugAutocompleteItem, string>? TextSelector { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    private MudAutocomplete<DrugAutocompleteItem> Select { get ; set ; }

    public async Task Reset()
    {
        await Select.ClearAsync();
    }

    private async Task OnInnerValueChanged(DrugAutocompleteItem? v)
    {
        if (!EqualityComparer<DrugAutocompleteItem?>.Default.Equals(Value, v))
        {
            Value = v;                         // keep local state in sync
            await ValueChanged.InvokeAsync(v); // notify parent (enables @bind-Value on this component)
        }
    }

    private string GetText(DrugAutocompleteItem item)
        => TextSelector?.Invoke(item) ?? DefaultText(item);

    private static string DefaultText(DrugAutocompleteItem d)
    {
        try
        {
            var     t        = d.GetType();
            string? brand    = t.GetProperty("BrandName")?.GetValue(d)?.ToString();
            string? generic  = t.GetProperty("GenericName")?.GetValue(d)?.ToString();
            string? label    = t.GetProperty("Label")?.GetValue(d)?.ToString();
            string? form     = t.GetProperty("Form")?.GetValue(d)?.ToString();
            string? strength = t.GetProperty("Strength")?.GetValue(d)?.ToString() ?? $"{t.GetProperty("StrengthValue")?.GetValue(d)} {t.GetProperty("StrengthUnit")?.GetValue(d)}".Trim();

            var main  = label ?? brand ?? generic ?? d.ToString() ?? string.Empty;
            var extra = string.Join(" ",
                new[]
                {
                    strength,
                    form
                }.Where(s => !string.IsNullOrWhiteSpace(s)));

            return string.IsNullOrWhiteSpace(extra) ? main : $"{main} — {extra}";
        }
        catch { return d?.ToString() ?? string.Empty; }
    }

    private async Task<IEnumerable<DrugAutocompleteItem>> Search(string input, CancellationToken cancellation)
    {
        if (string.IsNullOrWhiteSpace(input) || input.Trim().Length < MinCharacters)
            return Enumerable.Empty<DrugAutocompleteItem>();

        try
        {
            var list = await Mediator.Send(new AutocompleteDrugsQuery
                {
                    Limit = Limit,
                    Q = input.Trim()
                },
                cancellation);

            return (IEnumerable<DrugAutocompleteItem>)list ?? Enumerable.Empty<DrugAutocompleteItem>();
        }
        catch { return Enumerable.Empty<DrugAutocompleteItem>(); }
    }

}
