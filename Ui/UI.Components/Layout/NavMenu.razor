@using System.Security.Claims
@using App.Applications.Doctor.Requests.Get
@using App.Applications.Users.Queries.GetUserInfo
@using Microsoft.AspNetCore.Components.Authorization
@using UI.Components.Common.BaseComponents.Dialogs
@using UI.Components.Common.BaseComponents.Picture
@using UI.Components.Features.Apointments.Dialogs
@using UI.Components.Features.Clinics
@using UI.Components.Features.Doctors

<MudNavMenu Class="app-nav" Margin="Margin.Normal" Rounded Bordered Dense>

    <!-- همیشه قابل نمایش -->
    <MudNavLink Href="/" Icon="@MaterialIcons.Filled.Home" IconColor="Color.Primary">
        صفحه اصلی
    </MudNavLink>

    <AuthorizeView>
        <Authorized Context="auth">
            @{
                var isDoctor    = auth.User.IsInRole("Doctor");
                var isSecretary = auth.User.IsInRole("Secretary");
                var isPatient   = auth.User.IsInRole("Patient");
            }

            @* Doctor (super admin) *@
            @if (isDoctor)
            {
                <MudNavGroup Title="مدیریت کاربران" Icon="@MaterialIcons.Filled.PersonAdd" IconColor="Color.Tertiary">
                    <MudNavLink OnClick="OpenRegisterDialog" Icon="@MaterialIcons.Filled.PersonAdd"
                                IconColor="Color.Success">
                        ثبت‌نام (بیمار / منشی)
                    </MudNavLink>
                    <MudNavLink OnClick="() => OpenAddApoint(isPatient)" Icon="@MaterialIcons.Filled.CalendarMonth"
                                IconColor="Color.Info">
                        رزرو نوبت
                    </MudNavLink>
                </MudNavGroup>
            }

            @* Patient panel (Doctor/Secretary/Patient) *@
            @if (isDoctor || isSecretary || isPatient)
            {
                <MudNavGroup Title="@GetPatientPanelTitle(isPatient, isSecretary)"
                             Icon="@MaterialIcons.Filled.MedicalServices" IconColor="Color.Primary">
                    <MudNavLink OnClick="@(() => Navigate("/patient/appointments"))"
                                Icon="@MaterialIcons.Filled.EventAvailable" IconColor="Color.Success">
                        @(isPatient ? "نوبت‌های من" : "نوبت‌های بیماران")
                    </MudNavLink>

                    <MudNavLink OnClick="@(() => Navigate("/patient/history"))"
                                Icon="@MaterialIcons.Filled.History" IconColor="Color.Info">
                        @(isPatient ? "سوابق نوبت من" : "سوابق نوبت بیماران")
                    </MudNavLink>

                    <MudNavLink OnClick="@(() => Navigate("/patient/cancel"))"
                                Icon="@MaterialIcons.Filled.Cancel" IconColor="Color.Error">
                        @(isPatient ? "لغو نوبت من" : "لغو نوبت بیماران")
                    </MudNavLink>
                </MudNavGroup>

                <MudNavLink OnClick="@(() => Navigate("/clinic-services"))"
                            Icon="@MaterialIcons.Filled.LocalHospital" IconColor="Color.Success">
                    خدمات
                </MudNavLink>
            }

            @* Secretary tools (Secretary & Doctor) *@
            @if (isSecretary || isDoctor)
            {
                <MudNavGroup Title="دستیار" Icon="@MaterialIcons.Filled.PersonAddAlt1" IconColor="Color.Success">
                    <MudNavLink OnClick="@(() => OpenAddApoint(isPatient))"
                                Icon="@MaterialIcons.Filled.PersonAddAlt1" IconColor="Color.Success">
                        رزرو برای بیمار
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => Navigate("/users?Secretaries=false"))"
                                Icon="@MaterialIcons.Filled.Group" IconColor="Color.Info">
                        لیست بیماران
                    </MudNavLink>
                </MudNavGroup>
            }

            @* Doctor admin only *@
            @if (isDoctor)
            {
                <MudNavGroup Title="مدیریت کلینیک" Icon="@MaterialIcons.Filled.EditCalendar" IconColor="Color.Warning">
                    <MudNavLink Href="/doctor/schedule" Icon="@MaterialIcons.Filled.Schedule" IconColor="Color.Info">
                        تعریف بازه‌های زمانی
                    </MudNavLink>
                    <MudNavLink Href="/doctor/agenda" Icon="@MaterialIcons.Filled.ViewAgenda" IconColor="Color.Primary">
                        لیست نوبت‌های روزانه
                    </MudNavLink>
                    <MudNavLink OnClick="@(() => Navigate("/users?Secretaries=true"))"
                                Icon="@MaterialIcons.Filled.Group" IconColor="Color.Info">
                        لیست منشی ها
                    </MudNavLink>
                    <MudNavLink Href="/doctor/manage" Icon="@MaterialIcons.Filled.EditCalendar"
                                IconColor="Color.Warning">
                        مدیریت/جابجایی نوبت
                    </MudNavLink>
                    <MudNavLink Href="/reports/appointments" Icon="@MaterialIcons.Filled.Assessment"
                                IconColor="Color.Secondary">
                        گزارش همه نوبت‌ها
                    </MudNavLink>
                    <MudNavLink OnClick="OpenClinicDialog" Icon="@MaterialIcons.Filled.Settings"
                                IconColor="Color.Error">
                        تنظیمات کلینیک
                    </MudNavLink>
                    <MudNavLink OnClick="OpenDoctorInfo" Icon="@MaterialIcons.Filled.EnergySavingsLeaf"
                                IconColor="Color.Error">
                        اطلاعات دکتر
                    </MudNavLink>
                </MudNavGroup>
            }

            <MudDivider Class="my-2"/>

            <!-- User card -->
            <MudNavLink OnClick="OpenUserInfo">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Size="Size.Medium">
                        <ServerImage Src="@StateProvider.User?.Profile"/>
                    </MudAvatar>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.subtitle1" Bold="true">
                            @($"{GetRoleName(auth.User)}: {StateProvider.User?.FirstName} {StateProvider.User?.LastName}")
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @StateProvider.User?.UserName
                        </MudText>
                    </MudStack>
                </MudStack>
            </MudNavLink>
        </Authorized>

        <NotAuthorized>
            <MudDivider Class="my-2"/>
            <MudText Class="px-2" Typo="Typo.caption" Color="Color.Secondary">برای دسترسی بیشتر وارد شوید</MudText>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

<style>
    /* tighter + consistent look */
    .app-nav .mud-nav-link {
        border-radius: 10px;
    }

    .app-nav .mud-nav-link .mud-icon-root {
        opacity: .9;
    }

    .app-nav .mud-nav-group {
        margin-top: 4px;
    }

    .app-nav .mud-nav-group .mud-nav-link {
        margin-inline-start: .25rem;
    }
</style>

@code {

    private static string GetPatientPanelTitle(bool isPatient, bool isSecretary)
        => isPatient ? "پنل بیمار" : isSecretary ? "پنل بیمار (دستیار)" : "پنل بیمار";

    private string GetRoleName(ClaimsPrincipal user)
    {
        if (user.IsInRole("Doctor")) return "دکتر";
        if (user.IsInRole("Secretary")) return "منشی";
        if (user.IsInRole("Patient")) return "بیمار";

        return "کاربر";
    }

    private async Task OpenClinicDialog()
    {
        var dialogOptions = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth        = true,
            MaxWidth         = MaxWidth.Medium,
            NoHeader         = true,
        };


        await DialogService.ShowAsync<ClinicInfoDialog>("", dialogOptions);
    }

    private async Task OpenRegisterDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth        = true,
            MaxWidth         = MaxWidth.Small
        };


        await DialogService.ShowAsync<RegisterDialog>("ثبت‌نام", options);
    }

    public void Navigate(string to, bool hard = true)
    {
        NavigationManager.NavigateTo(to, false, hard);
    }

    private async Task OpenDoctorInfo()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth         = MaxWidth.Medium,
            FullWidth        = true,
            CloseButton      = true,
            Position         = DialogPosition.Center,
            NoHeader         = true
        };

        var user = await Mediator.Send(new GetDoctorProfileRequest());


        var parameters = new DialogParameters
        {
            {
                "Model", user
            }
        };


        await DialogService.ShowAsync<UpdateDoctorInfoDialog>("", parameters, options);
    }

    private async Task OpenUserInfo()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth         = MaxWidth.Medium,
            FullWidth        = true,
            CloseButton      = true,
            Position         = DialogPosition.Center
        };

        var user = await Mediator.Send(new GetUserInfoQuery());


        var parameters = new DialogParameters
        {
            {
                "Model", user
            },
            {
                "AllowEdit", !StateProvider.User?.Roles?.Contains("Patient") ?? false
            }
        };


        await DialogService.ShowAsync<ProfileInfoDialog>("اطلاعات کاربر", parameters, options);
    }

    private async Task OpenAddApoint(bool isPatient)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth         = MaxWidth.Medium,
            FullWidth        = true,
            CloseButton      = true,
            Position         = DialogPosition.Center
        };

        var parameters = new DialogParameters
        {
            {
                "IsPatient", isPatient
            }
        };


        await DialogService.ShowAsync<CreateAppointment>("اطلاعات کاربر", parameters, options);
    }


}
